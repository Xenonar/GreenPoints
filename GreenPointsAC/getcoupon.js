/**
 * Sample React Native App
 * https://github.com/facebook/react-native
 * @flow
 */

import React, { Component } from 'react';
import {
  AppRegistry,
  StyleSheet,
  Text,
  View,
  Image,
  TouchableOpacity,
  TextInput,
  Dimensions,
  Alert,
  ListView,
} from 'react-native';
import * as firebase from 'firebase';
import Icon from 'react-native-vector-icons/FontAwesome';
import api from './api.js';

export default class getcouponscreen extends Component {
  constructor(props){
    super(props);
    const ds = new ListView.DataSource({rowHasChanged: (r1, r2) => r1 !== r2});
    this.state = {
      dataSource: ds.cloneWithRows(['row1']),
      hasCoupon:false,
      userPoints: 0,
    }
    //get current user, should not be null because we will only allow the user that have already logged in to see this page
    //the database path based on the user's UID from Firebase's Authentication System

    this._handleGetInfo = this._handleGetInfo.bind(this);
    this._handleExchange = this._handleExchange.bind(this);

  }
  componentDidMount() {
    this._handleGetInfo();
  }
  shouldComponentUpdate() {
    return true;
    //this._handleGetInfo(this.itemsRef);
  }
  _confirmPurchase(data){
    var uPoints = this.state.userPoints;
    var newPoints = uPoints - data.price;
    var confirmStr = `You have: ${uPoints} Points\nNeed: ${data.price} Points\nNew balance: ${newPoints} Points`;
    if (newPoints < 0){
      Alert.alert(
        'Error',
        'Your current point is ' + uPoints + '. You need '+ Math.abs(newPoints) + ' more points to exchange for this item'
      )
    }else{
      Alert.alert(
        "Confirmation",
        confirmStr,
        [
          {text: 'Exchange', onPress: () => this._handleExchange(data)},
          {text: 'Cancle', onPress: () => console.log('The transaction was cancelled!')},
        ]
      )
    }
  }
  _handleExchange(data){
    var user = firebase.auth().currentUser;
    if (user != null) {
      var userId = user.uid;
      var dbuser = firebase.database().ref('users/' + userId + '/coupon');
      var refPoints = firebase.database().ref("users/"+user.uid+"/points");
      refPoints.transaction(function(currentPoints){
        return currentPoints - data.price;
      });
      dbuser.push({
        cname:data.name,
        photoURL: data.image,
        description: data.desc,
        code: data.promoCode,
        expire: data.expireDate,
        price: data.price,
        status: 'available for use',
        createdAt:firebase.database.ServerValue.TIMESTAMP,
      });
      Alert.alert("Success!", "You transaction was successful")
    }
  }
  _handleGetInfo(){
    var user = firebase.auth().currentUser;
    thisState = this;
    if(user != null){
        let userPointsRef = firebase.database().ref("users/"+user.uid+"/points");
        userPointsRef.on("value", function(snapshot) {
      		thisState.setState({userPoints:snapshot.val()});
      	}, function (errorObject) {
      	   Alert.alert("Failed to read data: " + errorObject.code);
      	});
        let itemsRef = firebase.database().ref("/couponTable");
      //Get data from Firebase based on itemsRef
      	itemsRef.orderByChild('createdAt').on("value", (snap) => {
          if (snap.numChildren() > 0){
            //create new emprty array called 'items' to make an array of objects like [{ob1} , {ob2}] ....
            //where ob1 and ob2 has its own keys e.g. name, _key
            var items = [];
            //use the data that we got from Firebase which we refers as 'snap'
            //Loop through it and push the data to the 'items' array that we have created early
            snap.forEach((child) => {
              items.push({
                //----- WTF is snap ------//
                //snap will have a data like -sdWRsfa6WRqfw {cname:'kak', expires:'some date' etc} , -sdWRsfserrsdsf {cname:'sdsd' ....} bla bla
                //that random text e.g. '-sdWRsfa6WRqfw' is like an instance of a coupon which has its own information like coupon name and etc,
                //and we may have one or more coupons stored in here
                //the '-sdWRsfa6WRqfw' and '-sdWRsfserrsdsf' are a >>unique keys<< that generated by Firebase push method to ensure that
                //each data will always unique and not conflicts with other data
                //also it can be any random name, '-sdWRsfa6WRqfw' is just an example
                //----------------------------------------------------//
                //----- WTF is child ------//
                // each child will have a data structure like {cname: 'kak', expires: 'some date' etc}
                // it's just a loop that loop through 'snap' so we can access a data inside each coupon(unique key)
                // and to notice, the unique key in each loop now will refers as 'child'
                // so the following codes will access the 'child' keys and theirs value directly.
                name: child.val().cname,
                image: child.val().photoURL,
                promoCode: child.val().code,
                desc: child.val().description,
                expireDate: child.val().expire,
                _key: child.key,
                price: child.val().price,
              });
            });
            this.setState({hasCoupon: true, dataSource: this.state.dataSource.cloneWithRows(items.reverse())});
            //Just for checking
            //alert(JSON.stringify(items[0].name));
            //alert(JSON.stringify(this.state.dataSource));
          }else{
            this.setState({hasCoupon: false});
          }

        });
    }


  }

  render() {
    if(!this.state.hasCoupon){
      return (
        <Image
          style={styles.container}
          source={require('./greenpoint_img/greenPointsBG.png')}>
          <Text style={{alignSelf:'center', marginTop:65}}> No coupon</Text>

        </Image>
      );
    }else{
      return (
        <Image
          style={styles.container}
          source={require('./greenpoint_img/greenPointsBG.png')}>
          <ListView
            style={styles.tablecontainer}
            dataSource={this.state.dataSource}
            renderRow={(rowData) =>
              <TouchableOpacity style={{marginTop:3}} onPress={()=> this._confirmPurchase(rowData)}>
                <View style={styles.row}>
                  <View style={{flex:3,justifyContent:'center'}}>
                    <Image style={styles.rowimage} source={{uri: rowData.image}}/>
                  </View>
                  <View style={{flex:10, padding:10,justifyContent:'center'}}>
                    <Text style={styles.rowtitle}>{rowData.name}</Text>
                    <Text style={styles.rowdes}>{rowData.desc}</Text>
                    <Text style={styles.rowdes}>Expire: {rowData.expireDate}</Text>
                    <Text style={[styles.rowdes,{marginTop:5,textAlign:'right'}]}>Get this for: {rowData.price} Points</Text>
                  </View>
                </View>
              </TouchableOpacity>
            }

          />

        </Image>
      );
    }
  }

}
const userIcon = (<Icon name="user" size={20} color="#fff" />)
const pwIcon = (<Icon name="lock" size={25} color="#fff" />)
const confirmIcon = (<Icon name="check-circle-o" size={25} color="#fff" />)
const emailIcon = (<Icon name="at" size={25} color="#fff" />)
const styles = StyleSheet.create({
  container: {
    flex: 1,
    width: null,
    height: null,
  },
  tablecontainer: {
    flex:1,
    paddingLeft:10,
    paddingRight:10,
    marginTop: 60,
    marginBottom: 5,
  },
  titletext: {
    fontSize: 20,
    fontWeight: 'bold',
    textShadowColor: 'grey',
    textShadowOffset: {width: 2.5, height: 2.5},
    color: 'white',
  },
  displaytext: {
    fontSize: 20,
    fontWeight: 'bold',
    textShadowColor: 'grey',
    textShadowOffset: {width: 2.5, height: 2.5},
    color: 'white',
	  textAlign: 'right',
  },
  instructions: {
    fontSize: 15,
    textAlign: 'center',
    color: '#333333',
  },
  textinput: {
    fontSize: 20,
    width: Dimensions.get('window').width * .8,
    height: 50,
    borderWidth: 2,
    borderRadius: 5,
    borderColor: 'rgba(34,125,63,0.6)',
    backgroundColor: 'white',
  },
  itemcontainer: {
    marginTop: 20,
    width: Dimensions.get('window').width * .8,
  },
  button: {
    backgroundColor: 'rgba(44,125,73,1)',
    padding: 10,
    borderRadius: 5,
    borderColor: 'rgba(255,255,255,.75)',
    borderWidth: 2 ,
  },
  buttontext: {
    fontSize: 20,
    color: 'white',
    textAlign: 'center',
  },
  logoimg: {
    alignItems: 'center',
    resizeMode: 'cover',
    width: Dimensions.get('window').width * .8,
    height: 75,
  },
  navigationBar: {
    justifyContent: 'center',
    backgroundColor:'rgba(34,125,63,1)',
  },
  navigationBarText: {
    color: 'white',
    marginLeft: 10,
    marginTop: 15,
    fontSize: 20,
    backgroundColor:'pink',
  },
  navigationBarTitleText: {
    marginTop: 10,
    fontSize: 25,
    color: 'white',
    backgroundColor: 'pink',
  },
  row:{
    borderRadius: 5,
    padding: 10,
    backgroundColor: 'rgba(255,255,255,.6)',
    flexDirection: 'row',
    height: 120,
  },
  rowimage:{
    height:72,
    width:72,

  },
  rowtitle: {
    fontWeight: 'bold',
    fontSize: 20,
  },
  rowdes: {
    fontSize: 15,
  }
});
